{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\admin\\\\Downloads\\\\cchproject-main 2\\\\cchproject-main\\\\contexts\\\\authContext\\\\index.js\";\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport nookies from \"nookies\";\nimport { firebaseClient } from \"../../firebase/firebaseClient\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null\n});\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null); // handle auth logic here...\n\n  useEffect(() => {\n    return firebaseClient.auth().onIdTokenChanged(async user => {\n      if (!user) {\n        setUser(null);\n        nookies.set(undefined, 'token', '', {\n          path: '/'\n        });\n      } else {\n        const {\n          uid,\n          email\n        } = user;\n\n        if (email) {\n          const token = await user.getIdToken();\n          setUser(user);\n          nookies.set(undefined, 'token', token, {\n            path: '/'\n          });\n        } else {\n          setUser(null);\n          nookies.set(undefined, 'token', '', {\n            path: '/'\n          });\n        }\n      }\n    });\n  }, []); // force refresh the token every 10 minutes\n\n  useEffect(() => {\n    const handle = setInterval(async () => {\n      const user = firebaseClient.auth().currentUser;\n      if (user) await user.getIdToken(true);\n    }, 10 * 60 * 1000); // clean up setInterval\n\n    return () => clearInterval(handle);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};","map":{"version":3,"sources":["C:/Users/admin/Downloads/cchproject-main 2/cchproject-main/contexts/authContext/index.js"],"names":["React","useState","useEffect","useContext","createContext","nookies","firebaseClient","AuthContext","user","AuthProvider","children","setUser","auth","onIdTokenChanged","set","undefined","path","uid","email","token","getIdToken","handle","setInterval","currentUser","clearInterval","useAuth"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,aAAjD,QAAsE,OAAtE;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AAEA,MAAMC,WAAW,gBAAGH,aAAa,CAAC;AAC9BI,EAAAA,IAAI,EAAE;AADwB,CAAD,CAAjC;AAIA,OAAO,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACvC,QAAM;AAAA,OAACF,IAAD;AAAA,OAAOG;AAAP,MAAkBV,QAAQ,CAAC,IAAD,CAAhC,CADuC,CAGvC;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAOI,cAAc,CAACM,IAAf,GAAsBC,gBAAtB,CAAuC,MAAOL,IAAP,IAAgB;AAC1D,UAAI,CAACA,IAAL,EAAW;AACPG,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAN,QAAAA,OAAO,CAACS,GAAR,CAAYC,SAAZ,EAAuB,OAAvB,EAAgC,EAAhC,EAAoC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAApC;AACH,OAHD,MAGO;AACH,cAAM;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP,YAAiBV,IAAvB;;AAEA,YAAIU,KAAJ,EAAW;AACP,gBAAMC,KAAK,GAAG,MAAMX,IAAI,CAACY,UAAL,EAApB;AACAT,UAAAA,OAAO,CAACH,IAAD,CAAP;AACAH,UAAAA,OAAO,CAACS,GAAR,CAAYC,SAAZ,EAAuB,OAAvB,EAAgCI,KAAhC,EAAuC;AAAEH,YAAAA,IAAI,EAAE;AAAR,WAAvC;AACH,SAJD,MAIO;AACHL,UAAAA,OAAO,CAAC,IAAD,CAAP;AACAN,UAAAA,OAAO,CAACS,GAAR,CAAYC,SAAZ,EAAuB,OAAvB,EAAgC,EAAhC,EAAoC;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAApC;AACH;AACJ;AACJ,KAhBM,CAAP;AAiBH,GAlBQ,EAkBN,EAlBM,CAAT,CAJuC,CAwBvC;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMmB,MAAM,GAAGC,WAAW,CAAC,YAAY;AACnC,YAAMd,IAAI,GAAGF,cAAc,CAACM,IAAf,GAAsBW,WAAnC;AACA,UAAIf,IAAJ,EAAU,MAAMA,IAAI,CAACY,UAAL,CAAgB,IAAhB,CAAN;AACb,KAHyB,EAGvB,KAAK,EAAL,GAAU,IAHa,CAA1B,CADY,CAMZ;;AACA,WAAO,MAAMI,aAAa,CAACH,MAAD,CAA1B;AACH,GARQ,EAQN,EARM,CAAT;AAUA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEb,MAAAA;AAAF,KAA7B;AAAA,cAAwCE;AAAxC;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;AAED,OAAO,MAAMe,OAAO,GAAG,MAAM;AACzB,SAAOtB,UAAU,CAACI,WAAD,CAAjB;AACH,CAFM","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\nimport nookies from \"nookies\";\nimport { firebaseClient } from \"../../firebase/firebaseClient\";\n\nconst AuthContext = createContext({\n    user: null,\n});\n\nexport function AuthProvider({ children }) {\n    const [user, setUser] = useState(null);\n\n    // handle auth logic here...\n    useEffect(() => {\n        return firebaseClient.auth().onIdTokenChanged(async (user) => {\n            if (!user) {\n                setUser(null);\n                nookies.set(undefined, 'token', '', { path: '/' });\n            } else {\n                const { uid, email } = user;\n\n                if (email) {\n                    const token = await user.getIdToken();\n                    setUser(user);\n                    nookies.set(undefined, 'token', token, { path: '/' });\n                } else {\n                    setUser(null);\n                    nookies.set(undefined, 'token', '', { path: '/' });\n                }\n            }\n        });\n    }, []);\n\n    // force refresh the token every 10 minutes\n    useEffect(() => {\n        const handle = setInterval(async () => {\n            const user = firebaseClient.auth().currentUser;\n            if (user) await user.getIdToken(true);\n        }, 10 * 60 * 1000);\n\n        // clean up setInterval\n        return () => clearInterval(handle);\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>\n    );\n}\n\nexport const useAuth = () => {\n    return useContext(AuthContext);\n};\n"]},"metadata":{},"sourceType":"module"}